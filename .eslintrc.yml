env:
  es6: true
  node: true
extends:
  - "plugin:@typescript-eslint/recommended"
parser: "@typescript-eslint/parser"
parserOptions:
  sourceType: module
  # project: 'tsconfig.json'
plugins:
  - "@typescript-eslint"
  # - '@typescript-eslint/tslint'
  - "prettier"
ignorePatterns:
  - "dist/"
  - "node_modules/"
  - "*.d.ts"
  - "*.json"
  - "*/assets/*"
rules:
  ## Coding style
  no-nested-ternary: error
  quotes:
    - error
    - single
    - avoidEscape: true
      allowTemplateLiterals: false
  comma-style:
    - error
    - last
  no-mixed-spaces-and-tabs: error
  no-trailing-spaces: error
  no-multi-str: error
  semi:
    - error
    - always
  ## Error-prone
  eqeqeq:
    - error
    - smart
  no-func-assign: error
  no-prototype-builtins: error
  no-redeclare: error
  no-sequences: error
  no-unreachable: error
  ## eslint rule no-unused-vars gonna have problem when lint typescript
  no-unused-vars: "off"
  "@typescript-eslint/no-unused-vars":
    - error
    - args: all
      argsIgnorePattern: "^_"
      vars: all
      varsIgnorePattern: "^_"
  ## -------------Prettier ---------------
  "prettier/prettier": ["warn"]
  ## -------------Override typescript-eslint recommended rules ---------------
  "@typescript-eslint/array-type":
    - error
    - default: "array"
      readonly: "array"
  # "@typescript-eslint/await-thenable": ["error"]
  "@typescript-eslint/ban-types":
    - "error"
    - extendDefaults: true
  "@typescript-eslint/no-use-before-define":
    - error
    - classes: false
  "@typescript-eslint/no-inferrable-types":
    - "off"
    - ignoreParameters: false
      ignoreProperties: false
  # "@typescript-eslint/explicit-module-boundary-types":
  #     ["error"]
  # "@typescript-eslint/no-empty-interface":
  #     ["error"]
  # '@typescript-eslint/no-explicit-any': ['warn', { 'fixToUnknown': false, 'ignoreRestArgs': true }]
  # "@typescript-eslint/no-extra-non-null-assertion":
  #     ["error"]
  # "@typescript-eslint/no-floating-promises":
  #     ["error"]
  # "@typescript-eslint/no-for-in-array":
  #     ["error"]
  # "@typescript-eslint/no-implied-eval":
  #     ["error"]
  # "@typescript-eslint/no-misused-new":
  #     ["error"]
  # "@typescript-eslint/no-misused-promises":
  #     ["error"]
  # "@typescript-eslint/no-namespace":
  #     ["error"]
  # For now the framework is using TypeScript ~2.7.0.
  # If you are not using TypeScript 3.7 (or greater), then you will not need to use this rule, as the operator is not supported.
  # "@typescript-eslint/no-non-null-asserted-optional-chain":
  #     ["error"]
  # '@typescript-eslint/no-this-alias': ['error', { 'allowDestructuring': true, 'allowedNames': ['self'] }]
  # Magic number
  # Need to turnoff ESLint rule and valid TSLint rule
  # "no-magic-numbers": ["off"]
  # '@typescript-eslint/no-magic-numbers':
  #   ['off', { 'ignoreEnums': true, 'ignoreNumericLiteralTypes': true, 'ignoreReadonlyClassProperties': true }]
  # Constructors with parameters are valid. No need to add this rule
  #"@typescript-eslint/no-empty-function":
  #   ["error", { "allow": ["constructors"] }]
  ## -------------Tslint config ---------------
  # "@typescript-eslint/tslint/config": ["error", {
  #     "rulesDirectory": ['codelyzer'],
  #     "rules": {
  #     }
  # }]
