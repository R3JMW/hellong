# recommend 120
printWidth: 120

# indentation-level spaces
tabWidth: 2

# use spaces as indent lines
useTabs: false

# Add a semicolon at the end of every statement
semi: true

# Use single quotes instead of double quotes
singleQuote: true

# Change when properties in objects are quoted
# as-needed - Only add quotes around object properties where required
# consistent - If at least one property in an object requires quotes, quote all properties
# preserve - Respect the input use of quotes in object properties
quoteProps: "preserve"

# Use single quotes instead of double quotes in JSX (not for Angular)
# jsxSingleQuote: false

# Print trailing commas wherever possible when multi-line. (A single-line array, for example, never gets trailing commas.)
# es5 - Trailing commas where valid in ES5 (objects, arrays, etc.)
# none - No trailing commas
# all - Trailing commas wherever possible (including function arguments). This requires node 8 or a transform
trailingComma: "none"

# Print spaces between brackets in object literals.
bracketSpacing: true

# Put the > of a multi-line JSX element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
# false - Example
# <button
#   className="prettier-class"
#   id="prettier-id"
#   onClick={this.handleClick}>
#   Click Here
# </button>
# true - Example
# <button
#   className="prettier-class"
#   id="prettier-id"
#   onClick={this.handleClick}
# >
#   Click Here
# </button>
# jsxBracketSameLine: false

# Include parentheses around a sole arrow function parameter.
# always - Always include parens. Example: (x) => x
# avoid - Omit parens when possible. Example: x => x
arrowParens: "avoid"

# Specify which parser to use.
# Prettier automatically infers the parser from the input file path, so you shouldn't have to change this setting.
# parser: "angular"

# Specify the file name to use to infer which parser to use.
# filepath: "None"

# Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file.
# This is very useful when gradually transitioning large, unformatted codebases to prettier.
# requirePragma: false

# Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier.
# This works well when used in tandem with the --require-pragma option.
# If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
# insertPragma: false

# By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer,
# e.g. GitHub comment and BitBucket. In some cases you may want to rely on editor/viewer soft wrapping instead,
# so this option allows you to opt out with "never".
# proseWrap: "preserve"

# Specify the global whitespace sensitivity for HTML files, see whitespace-sensitive formatting for more info.
# css - Respect the default value of CSS display property.
# strict - Whitespaces are considered sensitive.
# ignore - Whitespaces are considered insensitive.
htmlWhitespaceSensitivity: "css"

# Whether or not to indent the code inside <script> and <style> tags in Vue files.
# Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
vueIndentScriptAndStyle: false

# "lf" – Line Feed only (\n), common on Linux and macOS as well as inside git repos
# "crlf" - Carriage Return + Line Feed characters (\r\n), common on Windows
# "cr" - Carriage Return character only (\r), used very rarely
# "auto" - Maintain existing line endings (mixed values within one file are normalised by looking at what's used after the first line)
endOfLine: "lf"
